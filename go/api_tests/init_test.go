package api_test

import (
	"context"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"time"

	"ssse-exercise-sieve/autogenerated_client"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/gexec"

	"testing"
)

func TestAPITests(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Sieve API Tests Suite")
}

var (
	path2bin    string
	serverStart *gexec.Session
	baseUrl     string
	primeClient *autogenerated_client.APIClient
	ctx         context.Context
)

var _ = BeforeSuite(func() {
	var err error
	ctx = context.Background()
	// context to be used by other tests

	workingDir, err := os.Getwd()
	Expect(err).NotTo(HaveOccurred())

	// get path to server build
	path2bin, err = gexec.Build(filepath.Join(workingDir, ".."))
	Expect(err).NotTo(HaveOccurred())
	freePort := getOpenPort()
	baseUrl = "http://localhost:" + strconv.Itoa(freePort)

	// build out command to run server
	cmd := exec.Command(path2bin)
	cmd.Env = append(os.Environ(), "SERVER_PORT="+strconv.Itoa(freePort))
	cmd.Stdout = GinkgoWriter
	cmd.Stderr = GinkgoWriter
	Expect(cmd).NotTo(BeNil())

	// start the server
	serverStart, err = gexec.Start(cmd, GinkgoWriter, GinkgoWriter)
	// log start time so we can print how long it took to start
	startTime := time.Now()
	Expect(err).NotTo(HaveOccurred())
	// give server start 10 seconds
	Eventually(func() error {
		resp, reqErr := http.Get(baseUrl + "/health")
		if reqErr != nil {
			return reqErr
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			return fmt.Errorf("received non-OK status: %d", resp.StatusCode)
		}
		return nil
	}, 10*time.Second, 500*time.Millisecond).Should(Succeed(), "Server did not become ready within 10 seconds")
	// log how long it took to start
	fmt.Fprintf(GinkgoWriter, "Server started in %s\n", time.Since(startTime))
	// make a client to use for the tests
	clientConfig := autogenerated_client.NewConfiguration()
	clientConfig.Servers[0].URL = baseUrl
	clientConfig.HTTPClient = &http.Client{
		Timeout: 5 * time.Second,
	}

	primeClient = autogenerated_client.NewAPIClient(clientConfig)
})

var _ = AfterSuite(func() {
	// make sure we aren't dangling any processes
	if serverStart != nil {
		serverStart.Kill()
	}
	// Cleanup build artifacts
	gexec.CleanupBuildArtifacts()
})

func getOpenPort() int {
	listener, err := net.Listen("tcp", ":0") // Bind to an available port
	if err != nil {
		log.Fatalf("Failed to get open port: %v", err)
	}
	defer listener.Close()
	return listener.Addr().(*net.TCPAddr).Port
}

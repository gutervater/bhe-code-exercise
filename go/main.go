package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"ssse-exercise-sieve/autogenerated_api"

	"ssse-exercise-sieve/server"
	"time"
)

type Config struct {
	Port string
}

func loadConfig() Config {
	port := os.Getenv("SERVER_PORT")
	if port == "" {
		port = "8080" // Default port
	}
	return Config{Port: port}
}

func main() {
	config := loadConfig()

	// get servicer for Eratosthenes that will fullfil the openapi contract
	sieveService := server.NewEratosthenesAPIService()

	sieveClient := autogenerated_api.NewEratosthenesAPIController(sieveService)
	router := autogenerated_api.NewRouter(sieveClient)

	// simple health check endpiont
	router.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte("OK"))
	})

	httpServer := &http.Server{
		Addr:         ":" + config.Port,
		Handler:      router,
		ReadTimeout:  10 * time.Second, // Prevent slow reads
		WriteTimeout: 10 * time.Second, // Prevent slow responses
		IdleTimeout:  60 * time.Second, // Keep connections open for reuse
	}
	go func() {
		log.Println("Starting API server on http://localhost:8080")
		log.Println("Test it out! http://localhost:8080/primebynumber/1000")

		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server failed to start: %v", err)
		}
	}()
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt)
	<-stop
	log.Println("Shutting down server")
	// give server 10 seconds to shut down gracefully
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := httpServer.Shutdown(ctx); err != nil {
		log.Fatalf("server shutdown failed: %v", err)
	}
	log.Println("Thanks for Priming, stop by soon")
}
